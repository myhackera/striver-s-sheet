	SOLUTION 1.)
==================>

class Solution:
    def majorityElement(self, arr: List[int]) -> List[int]:
        
        n = len(arr)
        res = []
        
        for i in range(n):
            count = 0
            for j in range(n):
                if arr[j] == arr[i]:
                    count += 1
            if count > n//3:
                if arr[i] not in res:
                    res.append(arr[i])
                
        return res 
        
TC: O(N*N)

SOLUTION 2.)
================>

from collections import Counter
class Solution:
    def majorityElement(self, arr: List[int]) -> List[int]:
        
        n = len(arr)
        ans = []
        c = Counter(arr)
        
        for index,value in c.items():
            if value > n//3:
                ans.append(index)
        
        return ans 
                
                
TC : O(N)

SOLUTION 3.) 
================>
Booye moore algorithms
----------------------->>>>>>>
class Solution:
    def majorityElement(self, arr: List[int]) -> List[int]:
        
        if not arr:
            return []
        
        candidate1, count1, candidate2, count2 = 0, 0, 1, 0
        
        for n in arr:
            if n == candidate1:
                count1 += 1
            elif n == candidate2:
                count2 += 1
            elif count1 == 0:
                candidate1, count1, = n, 1
            elif count2 == 0:
                candidate2, count2 = n, 1
            else:
                count1 -= 1
                count2 -= 1
            
        ans = []
        for n in (candidate1, candidate2):
            if arr.count(n) > len(arr)//3:
                ans.append(n)
        return ans
                
        
