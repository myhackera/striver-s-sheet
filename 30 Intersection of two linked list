# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:
        
        currA, currB = headA, headB
        lenA, lenB = 0, 0
        
        while currA:
            currA = currA.next
            lenA += 1 
        while currB:
            currB = currB.next
            lenB += 1 
        
        currA, currB = headA, headB
        
        if lenA > lenB:
            diff = lenA-lenB
            for i in range(diff):
                currA = currA.next
        elif lenA < lenB:
            diff = lenB-lenA
            for i in range(diff):
                currB = currB.next
                
        while currA != currB:
            currA = currA.next
            currB = currB.next
            
        return currA
