DYNAMIC PROGRAMMING 
========================>

class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        
        t = [[-1 for _ in range(n+1)] for _ in range(m+1)]
        
        for i in range(m+1):
            for j in range(n+1):
                
                if i == 0 or j == 0:
                    t[i][j] = 0
                    
        for i in range(1, m+1):
            for j in range(1, n+1):
                
                if i == 1 and j == 1:
                    t[i][j] = 1
                else:
                    t[i][j] = t[i-1][j] + t[i][j-1]
                    
        return t[m][n]
                    
USING MATHS 
========================>

For any given M x N grid, each unique path (no matter which one it is) requires you to move right from the starting point N - 1 times and move down from the starting point 
M - 1 times. Hence, regardless of the order you choose to move right or down, you need to make a total of (M - 1) + (N - 1) = M + N - 2 moves.

Then, out of the M + N - 2 moves, we need to select M - 1 moves to move right and the remaining N - 1 moves to move down. This essentially is why this problem boils down 
to combinatorics, because we need to calculate how many different ways we can select M - 1 moves from M + N - 2 moves (or equivalently, N - 1 moves from M + N - 2 moves).
                   
from math import comb
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
         return comb(m+n-2, m-1)
                   
                   
                   
                   
                   
                   
