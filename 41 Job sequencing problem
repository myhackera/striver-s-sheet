C++
====================>

class Solution 
{
    static bool comb(Job a, Job b){
        return a.profit > b.profit;
    }
    public:
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        sort(arr, arr+n, comb);
        vector<bool> vis(n, false);
        
        int maxprofit = 0; int jobcount = 0;
        
        for(int i = 0; i < n; i++){
            for(int j = arr[i].dead-1; j >= 0; j--){
                if(vis[j])
                    continue;
                else{
                    vis[j] = true;
                    maxprofit += arr[i].profit;
                    jobcount ++;
                    break;
                }
            }
        }
        
    return {jobcount, maxprofit};
    } 
};

PYTHON VERSION 
=================================>

def jsp(jobs, n):
    
    jobs.sort(key=lambda x: x[2], reverse=True)
    print(jobs)
    vis = [0]*n 
    jobCount = 0
    maxProfit = 0
    
    for i in range(n):
        for j in range(jobs[i][1]-1, -1, -1):
            
            if vis[j]:
                continue
            else:
                print(jobs[i])
                jobCount += 1 
                maxProfit += jobs[i][2]
                vis[j] = 1 
                break
    
    return {jobCount, maxProfit}





n = 4
jobs = [[1, 1, 40], [2, 1, 10], [3, 1, 30], [4, 4, 20]]
print(jsp(jobs, n))
