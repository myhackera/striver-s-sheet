SOLUTION 1.)
=========================>
  
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        
        res = []
        temp = head
        while(temp != None):
            res.append(temp.val)
            temp = temp.next
        return res == res[::-1]
            
            
TC : O(N)
SC : O(N)

SOLUTION 2.)
==========================>

class Solution:
    def rev(self, head):
        
        current = head
        prev = None
        while current :
            temp = current.next
            current.next = prev
            prev = current
            current = temp
        head = prev
        return head
        
        
        
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        
        if head == None or head.next == None:
            return True
        
        slow = head
        fast = head
        
        while fast.next and fast.next.next:
            slow = slow.next
            fast = fast.next.next
            
        slow.next = self.rev(slow.next)
        slow = slow.next
        
        while slow:
            if head.val != slow.val:
                return False
            slow = slow.next
            head = head.next
        return True
        
TC : O(N)
SC : O(1)
