import sys
class MinStack:

    def __init__(self):
        self.stack = []
        
    def push(self, val: int) -> None:
        currMin = self.getMin()
        if currMin == None or currMin > val:
            currMin = val
        self.stack.append([val, currMin])
           
        
    def pop(self) -> None:
        self.stack.pop()
            
            
    def top(self) -> int:
        if len(self.stack) > 0:
            return self.stack[-1][0]
        else:
            return None

    def getMin(self) -> int:
        if len(self.stack) > 0:
            return self.stack[-1][1]
        else:
            return None
            
            
 SPACE OPTIMISED 
 ============================>
 
 import sys
class MinStack:

    def __init__(self):
        self.stack = []
        self.mn = sys.maxsize  # minimum value of stack
        self.prevmins = []     # used to track previous mins of self.mn
        
    def push(self, val: int) -> None:
        
        self.stack.append(val)
        if val <= self.mn:
            self.prevmins.append(self.mn)
            self.mn = val
        
    def pop(self) -> None:
        if self.stack[-1] == self.mn:
            temp = self.prevmins.pop()
            self.mn = temp
        self.stack.pop()
            
    def top(self) -> int:
        return self.stack[-1]
    
    def getMin(self) -> int:
        return self.mn
