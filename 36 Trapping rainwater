SOLUTION 1.) 
=================================>

def trap(a, n):

    res = 0
    for i in range(1, n-1, 1):

        left = a[i]
        for j in range(i):
            left = max(left, a[j])

        right = a[i]
        for j in range(i+1, n):
            right = max(right, a[j])


        res += (min(left, right)-a[i])
        print(res)
            
    return res


a = [3, 0, 2, 0, 4]
n = len(a)
print(trap(a, n))

TC : O(N^2)
SC : O(1)

SOLUTION 2.) 
===============================>

def trap(a, n):
    
    left = [0]*n 
    right = [0]*n 
    water = 0
    
    left[0] = a[0]
    for i in range(1, n):
        left[i] = max(a[i], left[i-1])
        
    right[n-1] = a[n-1]
    for i  in range(n-2, -1, -1):
        right[i] = max(a[i], right[i+1])
        
    for i in range(n):
        water += (min(left[i], right[i])-a[i])
        
    return water
        
a = [3, 0, 2, 0, 4]
n = len(a)
print(trap(a, n))

TC : O(N)
SC : O(N)

SOLUTION 3.) 
================================>

class Solution:
    def trappingWater(self, arr,n):
        
        maxleft = 0
        maxright = 0
        res = 0
        low = 0
        high = n-1 
        
        while low <= high:
            
            if arr[low] < arr[high]:
                
                # if maxleft is greater, we can store water here
                if maxleft > arr[low]:
                    res += (maxleft-arr[low])
                else:
                    maxleft = arr[low]
            
                low += 1 
            else:
                
                # if maxright is greater, we can store water here
                if maxright > arr[high]:
                    res += (maxright-arr[high])
                else:
                    maxright = arr[high]
                    
                high -= 1
        return res

TC : O(N)
SC : O(1)
