class Solution:
    def kthElement(self,  arr1, arr2, n, m, k):
      
        # We have to apply binary search on smaller array
        if n > m:
            return self.kthElement(arr2, arr1, m, n, k)
        
        low = max(0, k-m) # at least one element from smaller array
        high = min(k, n)
        
        while low <= high:
            
            mid = (high+low)//2
            cut1 = mid
            cut2 = k - cut1
            
            l1 = arr1[cut1-1] if cut1 > 0 else float('-inf')
            l2 = arr2[cut2-1] if cut2 > 0 else float('-inf')
            r1 = arr1[cut1] if cut1 < n else float('inf')
            r2 = arr2[cut2] if cut2 < m else float('inf')
            
            if l1 > r2:
                high = cut1 - 1
            elif l2 > r1:
                low = cut1 + 1
            else:
                return max(l1, l2)
