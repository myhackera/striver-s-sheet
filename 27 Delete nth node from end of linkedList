=> Two Pointer Approach – Slow and Fast Pointers

This problem can be solved by using two pointer approach as below:

* Take two pointers – fast and slow. And initialize their values as head node
* Iterate fast pointer till the value of n.
* Now, start iteration of fast pointer till the None value of the linked list. Also, iterate slow pointer.
* Hence, once the fast pointer will reach to the end the slow pointer will reach the node which you want to delete.
* Replace the next node of the slow pointer with the next to next node of the slow pointer.




# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        
        fast = head
        slow = head
        
        for i in range(n):
            fast = fast.next 
        
        if not fast:
            return head.next
        
        while fast.next:
            fast = fast.next
            slow = slow.next
            
        slow.next = slow.next.next
        return head
        
